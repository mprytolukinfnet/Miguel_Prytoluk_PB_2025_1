# docker-compose.yaml
services:
  postgres:
    image: postgres:13
    container_name: postgres
    environment:
      - POSTGRES_USER=airflow
      - POSTGRES_PASSWORD=airflow
      - POSTGRES_DB=airflow
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6380:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      retries: 5

  minio:
    image: minio/minio:latest
    container_name: minio
    command: server /data --console-address ":9091"
    ports:
      - "9000:9000"
      - "9091:9091"
    env_file:
      - .env
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - minio-data:/data

  minio-setup:
    image: minio/mc
    container_name: minio-setup
    depends_on:
      minio:
        condition: service_healthy
    env_file:
      - .env
    entrypoint: /setup/setup.sh
    volumes:
      - ./minio_setup_files:/setup

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    
  kafka-setup:
    build:
      context: .
      dockerfile: streaming.Dockerfile
    container_name: kafka-setup
    depends_on:
      - kafka
    command: python create_topic.py

  speed-consumer:
    build:
      context: .
      dockerfile: streaming.Dockerfile
    container_name: speed-consumer
    depends_on:
      kafka-setup:
        condition: service_completed_successfully
      redis:
        condition: service_started
    env_file:
      - .env
    command: python speed_consumer.py
    restart: on-failure

  speed-producer:
    build:
      context: .
      dockerfile: streaming.Dockerfile
    container_name: speed-producer
    depends_on:
      minio-setup:
        condition: service_completed_successfully
      kafka-setup:
        condition: service_completed_successfully
    env_file:
      - .env
    command: python producer.py

  airflow-webserver:
    build: .
    command: webserver
    ports:
      - "8080:8080"
    depends_on:
      airflow-init:
        condition: service_completed_successfully
      minio-setup:
        condition: service_completed_successfully # S贸 inicia ap贸s o setup do MinIO
    env_file:
      - .env
    environment:
      - AIRFLOW_CONN_AWS_DEFAULT=aws://${MINIO_ROOT_USER}:${MINIO_ROOT_PASSWORD}@?extra=%7B%22endpoint_url%22%3A%20%22http%3A%2F%2Fminio%3A9000%22%7D
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
    volumes:
      - ./dags:/opt/airflow/dags
      - airflow_home:/opt/airflow

  airflow-scheduler:
    build: .
    command: scheduler
    depends_on:
      airflow-init:
        condition: service_completed_successfully
      minio-setup:
        condition: service_completed_successfully # S贸 inicia ap贸s o setup do MinIO
    env_file:
      - .env
    environment:
      - AIRFLOW_CONN_AWS_DEFAULT=aws://${MINIO_ROOT_USER}:${MINIO_ROOT_PASSWORD}@?extra=%7B%22endpoint_url%22%3A%20%22http%3A%2F%2Fminio%3A9000%22%7D
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
    volumes:
      - ./dags:/opt/airflow/dags
      - airflow_home:/opt/airflow

  airflow-init:
    build: .
    command: bash -c "airflow db upgrade && airflow users create --username airflow --firstname Peter --lastname Parker --role Admin --email spiderman@superhero.org --password airflow"
    env_file:
      - .env
    environment:
      - AIRFLOW_CONN_AWS_DEFAULT=aws://${MINIO_ROOT_USER}:${MINIO_ROOT_PASSWORD}@?extra=%7B%22endpoint_url%22%3A%20%22http%3A%2F%2Fminio%3A9000%22%7D
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
    depends_on:
      - postgres
      - redis
    volumes:
      - ./dags:/opt/airflow/dags
      - airflow_home:/opt/airflow

  airflow-trigger:
    build: .
    depends_on:
      airflow-webserver:
        condition: service_started
      airflow-scheduler:
        condition: service_started
    volumes:
      - ./trigger_dag.sh:/trigger_dag.sh
    command: bash -c "chmod +x /trigger_dag.sh && /trigger_dag.sh"

volumes:
  postgres-db-volume:
  minio-data:
  airflow_home: