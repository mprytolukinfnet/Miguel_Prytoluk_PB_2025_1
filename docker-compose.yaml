services:
  postgres:
    image: postgres:13
    container_name: postgres
    environment:
      - POSTGRES_USER=airflow
      - POSTGRES_PASSWORD=airflow
      - POSTGRES_DB=airflow
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U airflow"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6380:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]

  minio:
    image: minio/minio:latest
    container_name: minio
    command: server /data --console-address ":9091"
    ports:
      - "9000:9000"
      - "9091:9091"
    env_file:
      - .env
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - minio-data:/data

  minio-setup:
    image: minio/mc
    container_name: minio-setup
    depends_on:
      minio:
        condition: service_healthy
    env_file:
      - .env
    entrypoint: /setup/setup.sh
    volumes:
      - ./minio_setup_files:/setup

  zookeeper:
    image: bitnami/zookeeper:3.8
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    volumes:
      - zookeeper_data:/bitnami/zookeeper

  kafka:
    image: bitnami/kafka:3.4
    container_name: kafka
    ports:
      - "9092:9092"
    volumes:
      - kafka_data:/bitnami/kafka
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=INTERNAL://:29092,EXTERNAL://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=INTERNAL://kafka:29092,EXTERNAL://localhost:9092
      - KAFKA_INTER_BROKER_LISTENER_NAME=INTERNAL
    depends_on:
      - zookeeper
    healthcheck:
      test: ["CMD-SHELL", "/opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server kafka:29092 --list || exit 1"]
      interval: 15s
      timeout: 10s
      retries: 10
      
  kafka-setup:
    build:
      context: .
      dockerfile: streaming.Dockerfile
    container_name: kafka-setup
    depends_on:
      kafka:
        condition: service_healthy
    command: sh -c "sleep 15 && python create_topic.py"

  speed-consumer:
    build:
      context: .
      dockerfile: streaming.Dockerfile
    container_name: speed-consumer
    depends_on:
      kafka-setup:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
    env_file:
      - .env
    command: python speed_consumer.py
    restart: on-failure

  airflow-init:
    build: .
    container_name: airflow-init
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - .env
    environment:
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
      - AIRFLOW__CORE__EXECUTOR=SequentialExecutor
    command: bash -c "airflow db init && airflow db upgrade && airflow users create --username airflow --firstname Miguel --lastname Prytoluk --role Admin --email miguel.prytoluk@al.infnet.edu.br --password airflow"

  airflow-webserver:
    build: .
    container_name: airflow-webserver
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    env_file:
      - .env
    ports:
      - "8080:8080"
    environment:
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
      - AIRFLOW__CORE__EXECUTOR=SequentialExecutor
    volumes:
      - ./dags:/opt/airflow/dags
      - airflow_home:/opt/airflow
    command: webserver

  airflow-scheduler:
    build: .
    container_name: airflow-scheduler
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    env_file:
      - .env
    environment:
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
      - AIRFLOW__CORE__EXECUTOR=SequentialExecutor
    volumes:
      - ./dags:/opt/airflow/dags
      - airflow_home:/opt/airflow
    command: scheduler
    
  speed-producer:
    build:
      context: .
      dockerfile: streaming.Dockerfile
    container_name: speed-producer
    depends_on:
      kafka-setup:
        condition: service_completed_successfully
    env_file:
      - .env
    command: python producer.py

volumes:
  postgres-db-volume:
  minio-data:
  airflow_home:
  kafka_data:
  zookeeper_data: